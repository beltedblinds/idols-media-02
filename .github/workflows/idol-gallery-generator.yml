name: Idol Gallery Generator

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  generate:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout repo (shallow)
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 1  # only latest commit

      # 2Ô∏è‚É£ Restore cached thumbnails
      - name: Restore cached thumbnails
        uses: actions/cache@v4
        with:
          path: thumbnails
          key: thumbnails-${{ hashFiles('**/*.jpg', '**/*.png', '**/*.webp') }}
          restore-keys: |
            thumbnails-

      # 3Ô∏è‚É£ Set up Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      # 4Ô∏è‚É£ Install dependencies
      - name: Install dependencies
        run: pip install Pillow

      # 5Ô∏è‚É£ Generate thumbnails and gallery links (safe)
      - name: Generate thumbnails and gallery links
        run: |
          python <<'PYCODE'
          import os
          from PIL import Image

          repo = os.environ["GITHUB_REPOSITORY"]
          branch = "main"
          base_raw = f"https://raw.githubusercontent.com/{repo}/{branch}/"

          output_lines = []
          total, skipped, updated = 0, 0, 0

          os.makedirs("thumbnails", exist_ok=True)

          # 1Ô∏è‚É£ Collect all existing images
          existing_images = []
          for root, dirs, files in os.walk("."):
              if any(skip in root for skip in [".github", ".git", "thumbnails"]):
                  continue
              for file in files:
                  if file.lower().endswith((".jpg", ".jpeg", ".png", ".webp")):
                      existing_images.append(os.path.relpath(os.path.join(root, file), "."))

          # 2Ô∏è‚É£ Remove thumbnails for deleted images
          for thumb_file in os.listdir("thumbnails"):
              thumb_path = os.path.join("thumbnails", thumb_file)
              original_path = thumb_file.replace("_", os.sep)
              if original_path not in existing_images:
                  try:
                      os.remove(thumb_path)
                      print(f"üóë Removed old thumbnail: {thumb_path}")
                  except Exception:
                      pass

          # 3Ô∏è‚É£ Generate thumbnails
          for relative_path in existing_images:
              total += 1
              input_path = relative_path

              # ‚úÖ Only use folder name as idol_name
              folder = os.path.dirname(relative_path)
              idol_name = folder.replace("/", " ") if folder else os.path.splitext(relative_path)[0]

              # Keep the folder structure inside thumbnails/
              thumb_path = os.path.join("thumbnails", relative_path)
              os.makedirs(os.path.dirname(thumb_path), exist_ok=True)
              
              raw_url = f"{base_raw}{relative_path}".replace(" ", "%20")
              thumb_url = f"{base_raw}thumbnails/{relative_path}".replace(" ", "%20")

              src_mtime = os.path.getmtime(input_path)
              # Recreate thumbnail if it doesn't exist or is outdated
              if not os.path.exists(thumb_path) or os.path.getmtime(thumb_path) < src_mtime:
                  try:
                      with Image.open(input_path) as im:
                          im.thumbnail((300, 300))
                          im.save(thumb_path, "WEBP")
                          updated += 1
                  except Exception as e:
                      print(f"‚ö†Ô∏è Skipped {relative_path}: {e}")
                      continue
              else:
                  skipped += 1
              
              # ‚úÖ Output format with trailing comma and space
              output_lines.append(f"{idol_name}, {raw_url}, {thumb_url}, ")

          # Sort exactly like previous version
          output_lines.sort()

          # ‚úÖ Only this line is changed:
          with open("idol_gallery_links_02.txt", "w", encoding="utf-8") as f:
              f.write("\n".join(output_lines))

          print(f"üìÑ Generated idol_gallery_links_02.txt")
          print(f"Summary: Processed {total} images ‚Äî {updated} updated, {skipped} reused")
          PYCODE

      # 6Ô∏è‚É£ Commit generated file AND thumbnails
      - name: Commit and push results
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add idol_gallery_links_02.txt thumbnails || true
          if ! git diff --cached --quiet; then
            git commit -m "Update idol_gallery_links_02.txt & thumbnails [auto]"
            git push
          else
            echo "No changes to commit"
          fi

      # 7Ô∏è‚É£ Save thumbnails cache
      - name: Save thumbnails cache
        uses: actions/cache@v4
        with:
          path: thumbnails
          key: thumbnails-${{ hashFiles('**/*.jpg', '**/*.png', '**/*.webp') }}
          restore-keys: |
            thumbnails-
